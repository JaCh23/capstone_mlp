#include <stdio.h>
#include <math.h>
#include "hls_stream.h"

/***************** AXIS with TLAST structure declaration *********************/

struct AXIS_wLAST{
	float data;
	bool last;
};


/***************** Coprocessor function declaration *********************/

void pca_mlp(hls::stream<AXIS_wLAST>& S_AXIS, hls::stream<AXIS_wLAST>& M_AXIS);


/***************** Macros *********************/
#define NUMBER_OF_INPUT_WORDS 100  // length of an input vector
#define NUMBER_OF_OUTPUT_WORDS 4  // length of an input vector
#define NUMBER_OF_TEST_VECTORS 4  // number of such test vectors (cases)

/************************** Variable Definitions *****************************/

float test_input_memory [NUMBER_OF_TEST_VECTORS*NUMBER_OF_INPUT_WORDS] = {0.0179166666666665, -0.0277777777777778, -0.5316111111111110, 1.3873333333333338, -6.6955611111111120, -11.5249055555555575, 1.5421723967795846, 0.4505777142105565, 1.0864134813546524, 3.1881342227425460, 7.2760156196362962, 5.1053326241408881, 0.2570344827586207, 0.2011724137931035, 0.2346206896551724, 0.8785517241379308, 1.8830000000000000, 1.3849310344827590, -2.4860000000000002, -0.7880000000000000, -2.4939999999999998, -4.3919999999999995, -14.7019999999999982, -22.8160000000000025, 2.4180000000000001, 0.8320000000000001, 0.9559999999999998, 8.0980000000000008, 11.1119999999999983, -4.5099999999999998, 4.9039999999999999, 1.6200000000000001, 3.4499999999999997, 12.4900000000000002, 25.8139999999999965, 18.3060000000000045, -0.0170000000000000, 0.0310000000000000, -0.0141666666666667, 1.6499999999999999, -9.6826666666666661, -9.8800000000000008, 1.0489999999999999, 0.4160000000000000, 0.6421666666666666, 2.1169999999999991, 2.3743333333333334, 2.0760000000000001, 1.6944999999999999, 0.5340000000000000, 1.4690000000000001, 2.6759999999999993, 7.1944999999999997, 4.7349999999999994, 17.0000000000000000, 12.0000000000000000, 19.0000000000000000, 11.0000000000000000, 24.0000000000000000, 30.0000000000000000, 13.0000000000000000, 18.0000000000000000, 10.0000000000000000, 19.0000000000000000, 6.0000000000000000, 0.0000000000000000, 13.0000000000000000, 18.0000000000000000, 19.0000000000000000, 18.0000000000000000, 9.0000000000000000, 21.0000000000000000, 1.0000000000000000, 5.0000000000000000, 2.0000000000000000, 4.0000000000000000, 3.0000000000000000, 3.0000000000000000, -0.2216715754056783, 0.2985251508352243, -0.6095237392655002, 0.4788631379467528, 1.3351237283267536, -1.0233034953480893, -0.8114674221093883, -0.6189150232902647, -0.9648569817413883, 0.0810365028657603, 0.5990025642686376, 0.0445386005996729, 71.3585012500000033, 6.1137564444444443, 43.8871387777777784, 362.6668080000000600, 2933.1282566944450991, 4766.6360780277773301, 1.5870203351586685, 16.0564885236913710, 0.7029350000000001, 7.0334600000000007, -0.4328277777777780, -0.0517611111111110, -0.4820833333333334, 3.9996555555555555, -5.3322166666666675, -11.8233055555555548, 0.6757370824505382, 0.2281082576132614, 0.8163075613530860, 4.5480034565309291, 6.6275761980824397, 3.4583924503871830, 0.1874482758620690, 0.1036206896551724, 0.3513103448275862, 2.7696551724137928, 1.2135862068965517, 1.3584482758620688, -2.2300000000000004, -0.5319999999999999, -2.4720000000000000, -3.4039999999999990, -14.5939999999999994, -21.0860000000000021, 0.1219999999999999, 0.3940000000000001, 0.5900000000000000, 14.7219999999999995, 4.7900000000000000, -6.8200000000000003, 2.3520000000000003, 0.9259999999999999, 3.0619999999999998, 18.1259999999999977, 19.3840000000000003, 14.2660000000000018, -0.0830000000000000, -0.0210000000000000, -0.1490000000000000, 3.2374999999999998, -9.3200000000000003, -11.2040000000000006, 0.0872500000000000, 0.0899999999999999, 0.2165000000000000, 1.7250000000000001, 3.3660000000000005, 1.2040000000000006, 0.5389999999999999, 0.1460000000000000, 0.7250000000000000, 3.6425000000000010, 12.0130000000000017, 1.5731250000000010, 25.0000000000000000, 18.0000000000000000, 22.0000000000000000, 5.0000000000000000, 20.0000000000000000, 30.0000000000000000, 4.0000000000000000, 12.0000000000000000, 8.0000000000000000, 25.0000000000000000, 10.0000000000000000, 0.0000000000000000, 22.0000000000000000, 19.0000000000000000, 21.0000000000000000, 11.0000000000000000, 12.0000000000000000, 23.0000000000000000, 4.0000000000000000, 6.0000000000000000, 5.0000000000000000, 5.0000000000000000, 5.0000000000000000, 4.0000000000000000, -1.6020656177635675, -0.4588211322295269, -1.1212961528590022, 0.6945829330501342, 0.4059683458958991, -1.4121179311402934, 1.2828590648653573, -0.0664709253867772, 0.2214925189891934, 0.4536104808093442, -1.5782065165178125, 1.6148084962880174, 19.3188146944444448, 1.6413776944444445, 26.9628712499999956, 1100.4474001111111647, 2170.7190252499999588, 4552.5309780277775644, 0.8011791887248375, 15.1769115930321377, 0.3641383333333333, 7.2481133333333334, -0.5745500000000000, -0.2378222222222222, 0.0704055555555556, -2.1233611111111106, -5.2872388888888890, -17.2088777777777757, 0.5103519431072379, 0.7000846336843765, 0.6348546227335616, 2.2272770554279506, 3.5990491752795273, 4.9726618480882152, 0.1875862068965517, 0.1709425287356322, 0.1675862068965518, 0.6887241379310347, 0.7916551724137930, 1.1251034482758622, -1.5200000000000000, -1.9220000000000002, -1.2680000000000000, -7.1719999999999997, -10.1100000000000012, -25.0779999999999994, 0.1500000000000000, 0.4880000000000001, 1.1380000000000001, 0.7140000000000002, 0.8840000000000000, -9.2259999999999991, 1.6699999999999999, 2.4100000000000001, 2.4060000000000001, 7.8860000000000001, 10.9940000000000015, 15.8520000000000003, -0.5180000000000000, 0.0425000000000000, 0.1510000000000001, -1.6490000000000000, -5.6820000000000004, -17.8960000000000008, 0.4530000000000000, 0.2350000000000000, 0.2180000000000001, 1.4549999999999998, 3.2710000000000008, 3.2319999999999993, 0.9589999999999999, 0.6410000000000000, 0.4160000000000001, 2.7869999999999999, 6.3775000000000013, 7.4959999999999969, 27.0000000000000000, 11.0000000000000000, 8.0000000000000000, 24.0000000000000000, 26.0000000000000000, 30.0000000000000000, 3.0000000000000000, 19.0000000000000000, 22.0000000000000000, 6.0000000000000000, 4.0000000000000000, 0.0000000000000000, 16.0000000000000000, 22.0000000000000000, 16.0000000000000000, 20.0000000000000000, 14.0000000000000000, 13.0000000000000000, 2.0000000000000000, 4.0000000000000000, 4.0000000000000000, 4.0000000000000000, 2.0000000000000000, 2.0000000000000000, -0.2623060830577361, -1.3050276108434213, -0.4763553508779504, -0.9120573385646360, 0.2580414984705000, 0.3960940289308338, -1.3532513413986640, 0.4741136744848946, -0.0452051260620685, -0.1694936711174324, -1.1023619480190168, -0.9674139189547217, 17.7170042499999951, 16.4003371111111065, 12.2399200277777798, 284.0827646944443927, 1227.2415010277777583, 9626.1852067777763295, 0.9531410347334223, 18.8917816089960588, 0.4677400000000000, 7.4683066666666669, -0.5959777777777778, 0.1465833333333333, -0.8133222222222223, 2.8795666666666673, -4.3612277777777786, -10.3263277777777773, 0.7404277539135280, 0.2347006633754768, 0.9075474336479540, 2.9033311406421110, 8.5077432138897837, 2.3561417459102469, 0.1462758620689655, 0.0821379310344828, 0.1731724137931035, 0.6930344827586208, 1.1512758620689656, 0.4975862068965517, -1.9840000000000000, -0.3900000000000000, -2.4560000000000000, -0.0620000000000000, -16.0060000000000002, -14.0300000000000011, 0.2400000000000000, 0.4640000000000001, 0.0100000000000000, 8.4540000000000006, 9.5259999999999998, -6.4359999999999999, 2.2240000000000002, 0.8540000000000001, 2.4659999999999997, 8.5160000000000000, 25.5320000000000000, 7.5940000000000012, -0.2200000000000000, 0.1390000000000000, -0.2780000000000000, 1.4525000000000001, -8.6039999999999992, -10.3879999999999999, 0.3383333333333334, 0.2030000000000000, 0.2760000000000000, 1.1290000000000000, 4.5990000000000011, 2.2399999999999993, 1.1864999999999999, 0.3890000000000000, 1.5599999999999998, 4.6169999999999991, 13.3849999999999998, 4.4142500000000009, 22.0000000000000000, 8.0000000000000000, 28.0000000000000000, 1.0000000000000000, 20.0000000000000000, 30.0000000000000000, 8.0000000000000000, 22.0000000000000000, 1.0000000000000000, 29.0000000000000000, 10.0000000000000000, 0.0000000000000000, 18.0000000000000000, 15.0000000000000000, 18.0000000000000000, 10.0000000000000000, 11.0000000000000000, 14.0000000000000000, 0.0000000000000000, 2.0000000000000000, 1.0000000000000000, 1.0000000000000000, 2.0000000000000000, 3.0000000000000000, -0.7289404856687705, -0.2823612306570786, -0.7153290872299080, 0.8957611595332313, 0.5709612342530713, 0.1199968411079392, -1.0271904842486985, -0.7396928979332662, -1.1886267156485832, -0.7839382590785320, -1.1797811986664430, -1.2125081061568372, 27.1026831111111157, 2.2971322499999998, 44.5540614444444358, 501.6370769999999766, 2742.0600696944443371, 3365.5334790277779575, 1.1305243103779792, 14.4391362341313361, 0.5083083333333334, 6.6395366666666664};
int result_memory [NUMBER_OF_TEST_VECTORS*NUMBER_OF_OUTPUT_WORDS]; // same size as test_result_expected_memory
float results [NUMBER_OF_TEST_VECTORS][NUMBER_OF_OUTPUT_WORDS];
float mlp_labels [NUMBER_OF_TEST_VECTORS];
/*****************************************************************************
* Main function
******************************************************************************/
int main()
{
	int word_cnt, test_case_cnt = 0;
	int success;
	AXIS_wLAST read_output, write_input;
	hls::stream<AXIS_wLAST> S_AXIS;
	hls::stream<AXIS_wLAST> M_AXIS;

	/************** Run a software version of the hardware function to validate results ************/
	// instead of hard-coding the results in test_result_expected_memory

	for (test_case_cnt=0 ; test_case_cnt < NUMBER_OF_TEST_VECTORS ; test_case_cnt++){


		/******************** Input to Coprocessor : Transmit the Data Stream ***********************/

		printf(" Transmitting Data for test case %d ... \r\n", test_case_cnt);

		for (word_cnt=0 ; word_cnt < NUMBER_OF_INPUT_WORDS ; word_cnt++){

			write_input.data = test_input_memory[word_cnt+test_case_cnt*NUMBER_OF_INPUT_WORDS];
			write_input.last = 0;
			if(word_cnt==NUMBER_OF_INPUT_WORDS-1)
			{
				write_input.last = 1;
				// S_AXIS_TLAST is asserted for the last word.
				// Actually, doesn't matter since we are not making using of S_AXIS_TLAST.
			}
			S_AXIS.write(write_input); // insert one word into the stream
		}

		/* Transmission Complete */

		/********************* Call the hardware function (invoke the co-processor / ip) ***************/

		pca_mlp(S_AXIS, M_AXIS);


		/******************** Output from Coprocessor : Receive the Data Stream ***********************/

		printf(" Receiving data for test case %d ... \r\n", test_case_cnt);

		for (word_cnt=0 ; word_cnt < NUMBER_OF_OUTPUT_WORDS ; word_cnt++){

			read_output = M_AXIS.read(); // extract one word from the stream
			results[test_case_cnt][word_cnt] = read_output.data;
			printf("read_output: %f ...\n", read_output.data);
		}


		/* Reception Complete */
	}

	/************************** Checking correctness of results *****************************/

	success = 1;
	return 0;
}
