#include <stdio.h>
#include <math.h>
#include "hls_stream.h"

/***************** AXIS with TLAST structure declaration *********************/

struct AXIS_wLAST{
	float data;
	bool last;
};


/***************** Coprocessor function declaration *********************/

void pca_mlp(hls::stream<AXIS_wLAST>& S_AXIS, hls::stream<AXIS_wLAST>& M_AXIS);


/***************** Macros *********************/
#define NUMBER_OF_INPUT_WORDS 128  // length of an input vector
#define NUMBER_OF_OUTPUT_WORDS 4  // length of an input vector
#define NUMBER_OF_TEST_VECTORS 4  // number of such test vectors (cases)

/************************** Variable Definitions *****************************/
//float test_input_memory [NUMBER_OF_TEST_VECTORS*NUMBER_OF_INPUT_WORDS] = {0.017314464190467227f,0.7821381516657591f,1.0f,0.7851502881374393f,0.8214685624410034f,0.777309756018898f,1.0f,0.7438152161080576f,0.8758875965614796f,0.0f,0.8176854178020512f,0.6521847636448815f,0.9915502727104807f,0.14720052571656392f,0.2867605526436922f,0.0f,0.0f,1.0f,0.0f,0.8176854178020512f,0.6521847636448815f,1.0f,0.0f,0.0f,0.7327470560085914f,0.7670054540398284f,0.7876194904561352f,0.0003777085979821404f,0.004562143134149377f,0.015229133588794186f,0.008489068444362813f,0.0f,0.009446904812559165f,0.9824486506311336f,0.5290985126034317f,0.38614894284325796f,0.9494529308687075f,0.0f,0.07397361806125458f,0.59476694098463f,0.7198436209281258f,0.26609692233259596f,0.9824486506311336f,0.5290985126034317f,0.38614894284325796f,0.5751971490522738f,0.5788592538242026f,0.6546772353702576f,0.6303608153040674f,0.6459125042423195f,0.7726308539512028f,0.009468520442085682f,0.011712710762579626f,0.017824833108515348f,0.005093946644663561f,0.019465654191712645f,0.015376622627928382f,0.83442008939342f,0.41204243574476007f,0.9999999999999999f,0.9916250943994421f,0.3075444576465419f,0.3291439600701033f,0.5410450286608446f,0.665238985485304f,0.1066198430894188f,0.83442008939342f,0.41204243574476007f,0.9999999999999999f,0.5787903934852892f,0.6250082118276563f,0.5450281584503717f,0.6522639521708093f,0.5505606440131224f,0.7592430676622473f,0.0f,0.0f,0.0f,0.0f,0.0047103240218238085f,0.0f,0.7469269261405295f,0.6540769780819387f,0.48900901327472834f,1.0f,0.2661700890020115f,0.2057585278383944f,0.583041640151744f,0.7457313758113601f,0.09223203419799791f,0.7469269261405295f,0.6540769780819387f,0.48900901327472834f,0.577763837422617f,0.5693925573430506f,0.5870560088071526f,0.0f,0.7878431164406379f,0.6870106909630802f,0.1287997530906948f,0.04890807975145384f,0.11378937234541442f,0.07753320210333703f,0.3867255070794684f,0.12348765216436264f,0.8663248888827084f,1.0f,0.28347135356732167f,0.2654557598637883f,0.9525514116146542f,0.4973485965097738f,0.36541609268994457f,0.8711934524925733f,0.11531701824106748f,0.8663248888827084f,1.0f,0.28347135356732167f,0.5362222766191846f,0.4115857831263833f,0.8471261015945116}; // 4 inputs * 2
float test_input_memory [NUMBER_OF_TEST_VECTORS*NUMBER_OF_INPUT_WORDS] = {0.0012582245098390, -0.0008605525836302, 0.0003248938838390, 0.0037240134435035, -0.0024228150307782, 0.0009397616328378, 0.0072986690377095, -0.0043750536969490, 0.0017763261011822, 0.0118403334320836, -0.0062664289055960, 0.0027361663433877, 0.0171714333596483, -0.0075307292921428, 0.0036951790242695, 0.0230873178513704, -0.0075222453341077, 0.0045087335666494, 0.0293656824750524, -0.0055635806925468, 0.0050163842352918, 0.0357749756201958, -0.0010025967681552, 0.0050453065370707, 0.0420814157167495, 0.0067265784294832, 0.0044124183952828, 0.0480545046434092, 0.0180467342965822, 0.0029246713875319, 0.0534702279840996, 0.0331925904271389, 0.0003798054094334, 0.0581156484353719, 0.0521833829187869, -0.0034290859999562, 0.0617954899141719, 0.0748175030627921, -0.0087024407947258, 0.0643422822285551, 0.1006890530807191, -0.0156146835094194, 0.0656305725780810, 0.1292228840212813, -0.0242863320328959, 0.0655926344796659, 0.1597227111157725, -0.0347511968132065, 0.0642328097357090, 0.1914248985733737, -0.0469241581165231, 0.0616366764345186, 0.2235520096971144, -0.0605775744766548, 0.0579711461240566, 0.2553604853704718, -0.0753329779559655, 0.0534736875084128, 0.2861784585465079, -0.0906727720532266, 0.0484318871047537, 0.3154317958432883, -0.1059727472367851, 0.0431563115484161, 0.3426579512800099, -0.1205520154662708, 0.0379512841393393, 0.3675086114309780, -0.1337333979217774, 0.0330889945296112, 0.3897432130151088, -0.1449054451744299, 0.0287907118624127, 0.4092161314802608, -0.1535772283559051, 0.0252179309059755, 0.4258611302109317, -0.1594185576248209, 0.0224730933149404, 0.4396760920627940, -0.1622814243374931, 0.0206079265499996, 0.4507108231674303, -0.1622014175256271, 0.0196368869846193, 0.4590601120286346, -0.1593816054095180, 0.0195523727321870, 0.4648609472626878, -0.1541620404600326, 0.0203381151955962, 0.4682928591896812, -0.1469809350299201, 0.0219792940033811, 0.4695785601816753, -0.1383328092711158, 0.0244694973448244, 0.4689816209702383, -0.1287282602797639, 0.0278122573302336, 0.4667995688374232, -0.1186598185610783, 0.0320203832558502, 0.4633504070115958, -0.1085751297514601, 0.0371135594055137, 0.4589529740378090, -0.0988582018199055, 0.0431140475172057, 0.4539036999330326, -0.0898192490013355, 0.0500425768508524, 0.4484521922470012, -0.0816904915426511, 0.0579150024710450, 0.4427790298778377, -0.0746255322094694, 0.0667400024710450, 0.4369790298778378, -0.0687005322094694, 0.0654817779612060, 0.4378395824614680, -0.0690254260933084, 1.0000000000000000, 2.0000000000000000, 0.1495565512671955, -0.9486616985556582, -6.3431637766291704, 0.0000259746662469, 0.0005949305576223, -0.0004077839382913, 0.0000600251274077, 0.0017779637542646, -0.0012047294503627, 0.0000690336307882, 0.0035327986346474, -0.0023548652995657, 0.0000088652231985, 0.0058287121617114, -0.0038070597171391, -0.0001698023132079, 0.0086147407782681, -0.0054980670531126, -0.0005141563587178, 0.0118142181206435, -0.0073562992131805, -0.0010620868156499, 0.0153212085167711, -0.0093058657377894, -0.0018359757601149, 0.0190001769277727, -0.0112704440701559, -0.0028385097018006, 0.0226899848404716, -0.0131767734913740, -0.0040510866848252, 0.0262122646791802, -0.0149579644024378, -0.0054351371324137, 0.0293836523643086, -0.0165564221766540, -0.0069366901832278, 0.0320308999145647, -0.0179263485267671, -0.0084930285688121, 0.0340072809402484, -0.0190359615768113, -0.0100404714135642, 0.0352080531539020, -0.0198692144620347, -0.0115219660697014, 0.0355830069733203, -0.0204266950873559, -0.0128932161135963, 0.0351440525299698, -0.0207254624364591, -0.0141263214814803, 0.0339662406223494, -0.0207973997162238, -0.0152107060353465, 0.0321816155635749, -0.0206860844993638, -0.0161512727204832, 0.0299661748546407, -0.0204424769013580, -0.0169644652179568, 0.0275212428738443, -0.0201199718063747, -0.0176730588491139, 0.0250518927907217, -0.0197699085254082, -0.0183010289139894, 0.0227453562362525, -0.0194381316956175, -0.0188692070387708, 0.0207526954778135, -0.0191631660476440, -0.0193921239849226, 0.0191764993508586, -0.0189761269105937, -0.0198766637869914, 0.0180660677844315, -0.0189018414364930, -0.0203220322972088, 0.0174204080037211, -0.0189607493200170, -0.0207205933544397, 0.0171976441763555, -0.0191707415085428, -0.0210591420238236, 0.0173283936584473, -0.0195482950051257, -0.0213202564222705, 0.0177303184672023, -0.0201086584211748, -0.0214833241221666, 0.0183211157279301, -0.0208651474178912, -0.0215253512254854, 0.0190279505504245, -0.0218279065651660, -0.0214213571885700, 0.0197927589314832, -0.0230025985571466, -0.0211449319416360, 0.0205735106156172, -0.0243894679641190, -0.0206688278983525, 0.0213425575077898, -0.0259831663427869, -0.0199658269480246, 0.0220833724842834, -0.0277734645804347, -0.0190101436127139, 0.0227869064045043, -0.0297466172431988, -0.0177786503489289, 0.0234484832299248, -0.0318875348388385, -0.0162523342115880, 0.0240656381812296, -0.0341822435821600, -0.0144176633626712, 0.0246369987400775, -0.0366200226585118, -0.0122676633626712, 0.0251619987400775, -0.0391950226585118, -0.0122936380289180, 0.0245670681824552, -0.0387872387202205, 2.0000000000000000, 1.0000000000000000, -0.5004112797512257, 0.3169505856705684, -0.6333801784566829, 0.0005768660906579, -0.0003032223128181, -0.0002004894455859, 0.0017164407123128, -0.0008410673589494, -0.0006342085688461, 0.0033894002980085, -0.0014787487356199, -0.0013665012844736, 0.0055502055149764, -0.0020211225082021, -0.0024968032490069, 0.0081379979400277, -0.0022250130085594, -0.0041589789980401, 0.0110799126403319, -0.0018190232409734, -0.0065202175432824, 0.0142985915510191, -0.0005309323316872, -0.0097787750861205, 0.0177213113784469, 0.0018799031829722, -0.0141591500552935, 0.0212893547458971, 0.0055898775302960, -0.0199040233069775, 0.0249640845744175, 0.0106847293201751, -0.0272626479726493, 0.0287268953147329, 0.0171455768217972, -0.0364754590991940, 0.0325724565811183, 0.0248515750393128, -0.0477556357402030, 0.0364971707142002, 0.0335994132660022, -0.0612688708296040, 0.0404846817595203, 0.0431364933032923, -0.0771129194222596, 0.0444929373010044, 0.0532020718245101, -0.0952999593796204, 0.0484465608794872, 0.0635684244830584, -0.1157453629333215, 0.0522375013388257, 0.0740743559438913, -0.1382652902736125, 0.0557339605382444, 0.0846450636807449, -0.1625850590237038, 0.0587962548943927, 0.0952949810798972, -0.1883577849167229, 0.0612965064903964, 0.1061136809169480, -0.2151909111101344, 0.0631385145932745, 0.1172381027627716, -0.2426766020289949, 0.0642744074033761, 0.1288161892109815, -0.2704207970190701, 0.0647155119687936, 0.1409680551030668, -0.2980659771765962, 0.0645362107423040, 0.1537512996266712, -0.3253045311924566, 0.0638705992904299, 0.1671361231836130, -0.3518819960945652, 0.0629029931244083, 0.1809939748109775, -0.3775913709812029, 0.0618529252485281, 0.1951013711588102, -0.4022618833370583, 0.0609567406965364, 0.2091583380537193, -0.4257457292409951, 0.0604475287262940, 0.2228186666758789, -0.4479065104732918, 0.0605354360327630, 0.2357273146298341, -0.4686115094560093, 0.0613902090012136, 0.2475594697248213, -0.4877285479579424, 0.0631283243734843, 0.2580553861623744, -0.5051267497294298, 0.0658057714482543, 0.2670452913126317, -0.5206796589691826, 0.0694183882183097, 0.2744602659943925, -0.5342694374005766, 0.0739098787879620, 0.2803274034860820, -0.5457909554415082, 0.0791866332786402, 0.2847504023497672, -0.5551551534294170, 0.0851366736421522, 0.2878787157587205, -0.5622905457590711, 0.0916512732501183, 0.2898700497258913, -0.5671434504169627, 0.0986446446679364, 0.2908542320678023, -0.5696786563206895, 0.1060696446679364, 0.2909042320678023, -0.5698786563206895, 0.1054927785772785, 0.2912074543806205, -0.5696781668751035, 2.0000000000000000, 1.0000000000000000, 0.3622598837713645, -0.1851796061554291, -0.5111788924227193, 0.0003552745986771, -0.0000639194028700, 0.0002303774115284, 0.0011025112927649, -0.0002047728086971, 0.0006943783263803, 0.0023128047358510, -0.0004479481342828, 0.0013969196602337, 0.0040868280866819, -0.0008291901393962, 0.0023416020550211, 0.0065459975024572, -0.0013905113381097, 0.0035268597855410, 0.0098192569366106, -0.0021725194648348, 0.0049414704123553, 0.0140249718498973, -0.0032024751529702, 0.0065601270737166, 0.0192476394503200, -0.0044781330077282, 0.0083401935928410, 0.0255114156860716, -0.0059485501619651, 0.0102209606933377, 0.0327544360655782, -0.0074940397537901, 0.0121260484106529, 0.0408077606226740, -0.0089094532638058, 0.0139699206872757, 0.0493859494367730, -0.0098951600034512, 0.0156675566433661, 0.0580929125867615, -0.0100598385804224, 0.0171464062250145, 0.0664460093891809, -0.0089375897365667, 0.0183580005263141, 0.0739187879269731, -0.0060203838921816, 0.0192870149671635, 0.0799964759705402, -0.0008031359386028, 0.0199550632009724, 0.0842372875799682, 0.0071624117781013, 0.0204172511490184, 0.0863300889783527, 0.0182137577788571, 0.0207508948668976, 0.0861370877485206, 0.0325296431037084, 0.0210400901122189, 0.0837145137940554, 0.0500950597921421, 0.0213583881174552, 0.0793078428725786, 0.0706843311792588, 0.0217540192040862, 0.0733230587649375, 0.0938644336035578, 0.0222414667055428, 0.0662796976591085, 0.1190179944410504, 0.0228016358303572, 0.0587537634159518, 0.1453834352366487, 0.0233912229029516, 0.0513206158404606, 0.1721090009331563, 0.0239571134650047, 0.0445037797587669, 0.1983137889655971, 0.0244531364669633, 0.0387342605969570, 0.2231520745144197, 0.0248546008627003, 0.0343239759341889, 0.2458750518153205, 0.0251664079410716, 0.0314516336583082, 0.2658850844305493, 0.0254224647495891, 0.0301599072220813, 0.2827769691372332, 0.0256774107652960, 0.0303624164666969, 0.2963620528479575, 0.0259926652715260, 0.0318582391487248, 0.3066721171666196, 0.0264210188525332, 0.0343533018477244, 0.3139420804886847, 0.0269935420409305, 0.0374868645069817, 0.3185728011162742, 0.0277120495796295, 0.0408625369564649, 0.3210779600702935, 0.0285484126299378, 0.0440815190703251, 0.3220211744613614, 0.0294504639765775, 0.0467759937495504, 0.3219506801743304, 0.0303527809755716, 0.0486398467696290, 0.3213382939738236, 0.0311901850508043, 0.0494539745688875, 0.3205287889845441, 0.0319107264525637, 0.0491039745688875, 0.3197037889845441, 0.0324857264525637, 0.0487486999702105, 0.3197677083874141, 0.0322553490410353, 1.0000000000000000, 0.0000000000000000, 0.1524503528390961, 1.5113369230074778, 9.9136334869793323};
//int test_result_expected_label [NUMBER_OF_TEST_VECTORS*NUMBER_OF_OUTPUT_WORDS] = {0x03,0x02, 0x01, 0x01}; // 1 outputs *2

int result_memory [NUMBER_OF_TEST_VECTORS*NUMBER_OF_OUTPUT_WORDS]; // same size as test_result_expected_memory
float results [NUMBER_OF_TEST_VECTORS][NUMBER_OF_OUTPUT_WORDS];
float mlp_labels [NUMBER_OF_TEST_VECTORS];
/*****************************************************************************
* Main function
******************************************************************************/
int main()
{
	int word_cnt, test_case_cnt = 0;
	int success;
	AXIS_wLAST read_output, write_input;
	hls::stream<AXIS_wLAST> S_AXIS;
	hls::stream<AXIS_wLAST> M_AXIS;

	/************** Run a software version of the hardware function to validate results ************/
	// instead of hard-coding the results in test_result_expected_memory

	for (test_case_cnt=0 ; test_case_cnt < NUMBER_OF_TEST_VECTORS ; test_case_cnt++){


		/******************** Input to Coprocessor : Transmit the Data Stream ***********************/

		printf(" Transmitting Data for test case %d ... \r\n", test_case_cnt);

		for (word_cnt=0 ; word_cnt < NUMBER_OF_INPUT_WORDS ; word_cnt++){

//			write_input.data = test_input_memory[word_cnt];
			write_input.data = test_input_memory[word_cnt+test_case_cnt*NUMBER_OF_INPUT_WORDS];
//			write_input.data = converter.i;
			write_input.last = 0;
			if(word_cnt==NUMBER_OF_INPUT_WORDS-1)
			{
				write_input.last = 1;
				// S_AXIS_TLAST is asserted for the last word.
				// Actually, doesn't matter since we are not making using of S_AXIS_TLAST.
			}
			S_AXIS.write(write_input); // insert one word into the stream
		}

		/* Transmission Complete */

		/********************* Call the hardware function (invoke the co-processor / ip) ***************/

		pca_mlp(S_AXIS, M_AXIS);


		/******************** Output from Coprocessor : Receive the Data Stream ***********************/

		printf(" Receiving data for test case %d ... \r\n", test_case_cnt);

		for (word_cnt=0 ; word_cnt < NUMBER_OF_OUTPUT_WORDS ; word_cnt++){

			read_output = M_AXIS.read(); // extract one word from the stream
//			converter.i = read_output.data;
			results[test_case_cnt][word_cnt] = read_output.data;
			printf("read_output: %f ...\n", read_output.data);
		}


		/* Reception Complete */
	}

	/************************** Checking correctness of results *****************************/

	success = 1;

	/* Compare the data send with the data received */


	/* Compare the data send with the data received */
//	printf(" Comparing data ...\r\n");
//	for(word_cnt=0; word_cnt < NUMBER_OF_TEST_VECTORS*NUMBER_OF_OUTPUT_WORDS; word_cnt++){
//		// success = success & (result_memory[word_cnt] == test_result_expected_memory[word_cnt]);
//		printf(" output data %d ; expected data %d ... \r\n", result_memory[word_cnt], test_result_expected_memory[word_cnt]);
//	}

	// if (success != 1){
	// 	printf("Test Failed\r\n");
	// 	return 1;
	// }

	// printf("Test Success\r\n");

	return 0;
}
