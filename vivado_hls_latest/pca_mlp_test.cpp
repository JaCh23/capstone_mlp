#include <stdio.h>
#include <math.h>
#include "hls_stream.h"

/***************** AXIS with TLAST structure declaration *********************/

struct AXIS_wLAST{
	float data;
	bool last;
};


/***************** Coprocessor function declaration *********************/

void pca_mlp(hls::stream<AXIS_wLAST>& S_AXIS, hls::stream<AXIS_wLAST>& M_AXIS);


/***************** Macros *********************/
#define NUMBER_OF_INPUT_WORDS 100  // length of an input vector
#define NUMBER_OF_OUTPUT_WORDS 4  // length of an input vector
#define NUMBER_OF_TEST_VECTORS 4  // number of such test vectors (cases)

/************************** Variable Definitions *****************************/

float test_input_memory [NUMBER_OF_TEST_VECTORS*NUMBER_OF_INPUT_WORDS] = {-0.1608388888888889, 0.1431388888888889, -0.0749944444444444, -0.3885722222222221, -9.1486166666666673, -10.0844111111111090, 1.5537264085890132, 0.3071062311177649, 1.4527957992190077, 5.0292074321616393, 5.6560245898854520, 7.3238702618539833, 0.2961609195402298, 0.1066896551724138, 0.2902758620689656, 1.4731034482758618, 1.9492758620689659, 1.6637701149425284, -2.4440000000000000, -0.5920000000000000, -2.5099999999999998, -10.8999999999999986, -19.0259999999999998, -21.8159999999999989, 2.3639999999999999, 0.6619999999999999, 2.0060000000000002, 7.0939999999999994, 4.6540000000000008, 0.9200000000000002, 4.8079999999999998, 1.2540000000000000, 4.5160000000000000, 17.9939999999999998, 23.6799999999999997, 22.7360000000000007, -0.0637500000000000, 0.1980000000000000, -0.0029166666666667, 1.0116666666666667, -9.8559999999999999, -9.6296666666666670, 1.3502500000000000, 0.1510000000000000, 1.1649166666666666, 2.5353333333333334, 1.9539999999999997, 6.4996666666666671, 2.5135000000000001, 0.2965000000000000, 2.4370000000000003, 6.5019999999999998, 2.8744999999999994, 13.2195000000000000, 18.0000000000000000, 7.0000000000000000, 15.0000000000000000, 10.0000000000000000, 27.0000000000000000, 27.0000000000000000, 12.0000000000000000, 23.0000000000000000, 15.0000000000000000, 20.0000000000000000, 3.0000000000000000, 3.0000000000000000, 18.0000000000000000, 19.0000000000000000, 19.0000000000000000, 20.0000000000000000, 9.0000000000000000, 19.0000000000000000, 2.0000000000000000, 4.0000000000000000, 2.0000000000000000, 5.0000000000000000, 3.0000000000000000, 3.0000000000000000, 0.1526709967713267, -0.9817831701565931, -0.3899194883296718, -0.8112313040959674, 0.9607185266331624, -0.2043372540980081, -1.2017027550221324, 0.7164114281688545, -1.1157901890810829, -0.4589830710866116, 0.8505015542940888, -1.2046996649363311, 73.1980470277777897, 3.4440893611111112, 63.4871940277777682, 763.3174730277776234, 3470.6340322500000184, 4660.0326921111118281, 1.8378891345333337, 16.5779014383422059, 0.8366016666666667, 7.2446566666666676, -0.5159722222222223, -0.3035944444444444, -0.5465444444444444, 2.5527944444444444, -5.2298111111111103, -11.0108777777777753, 0.6670006331322073, 0.2372502026823992, 0.8063349018556850, 4.8113688711455485, 7.9617527335535181, 2.5997409934856734, 0.1975172413793104, 0.1507586206896552, 0.3696551724137931, 2.6355172413793104, 1.2248965517241384, 1.0532413793103446, -2.2500000000000000, -0.7380000000000000, -2.4739999999999998, -3.3579999999999997, -18.1300000000000026, -17.7500000000000000, 0.0020000000000000, 0.1940000000000000, 0.4540000000000001, 14.5220000000000002, 4.4920000000000000, -7.5599999999999996, 2.2519999999999998, 0.9319999999999999, 2.9279999999999999, 17.8799999999999990, 22.6220000000000034, 10.1900000000000013, -0.2260000000000000, -0.2920000000000000, -0.3729999999999999, 2.3616666666666668, -7.8044999999999991, -10.3740000000000006, 0.1586666666666667, 0.1670000000000000, 0.3170000000000001, 2.7799999999999998, 8.5980000000000008, 0.8900000000000006, 0.4874999999999999, 0.3356250000000000, 0.5785000000000000, 5.8249999999999993, 14.3219999999999992, 1.6515000000000004, 29.0000000000000000, 27.0000000000000000, 23.0000000000000000, 10.0000000000000000, 17.0000000000000000, 30.0000000000000000, 1.0000000000000000, 3.0000000000000000, 7.0000000000000000, 20.0000000000000000, 13.0000000000000000, 0.0000000000000000, 22.0000000000000000, 16.0000000000000000, 19.0000000000000000, 14.0000000000000000, 14.0000000000000000, 22.0000000000000000, 4.0000000000000000, 6.0000000000000000, 4.0000000000000000, 5.0000000000000000, 4.0000000000000000, 3.0000000000000000, -1.5787909712259360, 0.0121462047852715, -1.1265648981049121, 0.9579765894166130, -0.1073759623738085, -1.3602562803002953, 1.1729268616634685, -0.4820223910784835, 0.6402559402230996, 0.5494325941738150, -1.6399604126184930, 1.3251259040303931, 21.3335153611111146, 4.4537173611111109, 28.4666041111111028, 889.9808966944444819, 2722.2129254444453181, 3839.9424801111108536, 0.9963443329620003, 14.8168018531432040, 0.4622333333333333, 6.9204849999999993, -0.4098555555555555, -0.3922222222222222, -0.2494277777777778, 1.5560833333333335, -6.0209166666666647, -15.4805555555555543, 0.6332765453097929, 0.5542199411875006, 0.4210944023730030, 1.5384234900449949, 5.1286746112475843, 4.1206046017484637, 0.1562758620689655, 0.1445517241379310, 0.0976551724137931, 0.3764137931034484, 0.5700000000000002, 0.5605517241379311, -2.0060000000000002, -1.8460000000000001, -1.3239999999999998, 0.3660000000000000, -13.1740000000000013, -20.1120000000000019, 0.0780000000000000, 0.0280000000000000, 0.1000000000000000, 5.4340000000000002, -0.0980000000000000, -9.2699999999999996, 2.0840000000000001, 1.8740000000000001, 1.4239999999999999, 5.0680000000000005, 13.0760000000000005, 10.8420000000000023, -0.0945000000000000, -0.1000000000000000, -0.0070000000000000, 0.6419999999999999, -8.0670000000000002, -15.1129999999999995, 0.0965000000000000, 0.1200000000000000, 0.0200000000000000, 0.2537500000000000, 4.7129999999999992, 4.8370000000000006, 0.4625000000000000, 0.5655000000000001, 0.3215000000000000, 1.2330000000000001, 9.9422499999999996, 8.5925000000000011, 25.0000000000000000, 20.0000000000000000, 22.0000000000000000, 0.0000000000000000, 30.0000000000000000, 30.0000000000000000, 5.0000000000000000, 10.0000000000000000, 5.0000000000000000, 30.0000000000000000, 0.0000000000000000, 0.0000000000000000, 22.0000000000000000, 21.0000000000000000, 22.0000000000000000, 8.0000000000000000, 14.0000000000000000, 16.0000000000000000, 3.0000000000000000, 2.0000000000000000, 2.0000000000000000, 3.0000000000000000, 3.0000000000000000, 3.0000000000000000, -1.5467115913130058, -1.4341066298834408, -1.5714167016073675, 1.4787658039080565, 0.0707157729532075, 0.2757629708442155, 1.0445690282700313, 0.9182176078143862, 1.0980849927758718, 0.9398039807980880, -1.8805012796915794, -1.4690101918889080, 17.0706227777777748, 13.8299404444444498, 7.1860413611111102, 143.6442652499999610, 1876.6422232499999154, 7698.8094777777778290, 0.6799000054394216, 17.7980294137537172, 0.3252916666666668, 6.9172666666666673, -0.2805555555555556, 0.3313277777777778, -0.7188333333333333, -0.0754000000000000, -10.6801833333333320, -10.3428444444444469, 0.8240053637605600, 0.6426484300134603, 1.0594173267519378, 3.1940073533624393, 5.8745038549131019, 2.2680850541457889, 0.2302758620689656, 0.2345517241379310, 0.2851724137931034, 0.9988275862068964, 1.4116551724137929, 0.7529655172413791, -2.1139999999999999, -0.8920000000000000, -2.5099999999999998, -7.9699999999999989, -19.6200000000000010, -14.6500000000000004, 0.8360000000000001, 1.3980000000000001, 1.0379999999999998, 6.0899999999999999, 7.4879999999999995, -6.1019999999999994, 2.9500000000000002, 2.2900000000000000, 3.5479999999999996, 14.0599999999999987, 27.1080000000000005, 8.5480000000000018, -0.1030000000000000, 0.4170000000000000, -0.7460000000000000, -0.3020000000000000, -10.5030000000000001, -9.9570000000000007, 0.5115000000000000, 0.4240000000000000, 0.7549999999999998, 1.2549999999999999, 1.0255000000000001, 1.4510000000000005, 1.0415000000000001, 0.9159999999999999, 1.4124999999999996, 3.3115000000000001, 3.4405000000000019, 2.7947500000000005, 18.0000000000000000, 8.0000000000000000, 23.0000000000000000, 19.0000000000000000, 28.0000000000000000, 30.0000000000000000, 12.0000000000000000, 22.0000000000000000, 7.0000000000000000, 11.0000000000000000, 2.0000000000000000, 0.0000000000000000, 19.0000000000000000, 17.0000000000000000, 15.0000000000000000, 11.0000000000000000, 16.0000000000000000, 16.0000000000000000, 1.0000000000000000, 3.0000000000000000, 1.0000000000000000, 4.0000000000000000, 3.0000000000000000, 1.0000000000000000, -0.7807568766172229, -0.3646039134386084, -0.1725382932751346, -0.3592164502953871, 1.3526854898624230, -0.4048784687918240, -0.2779310588568928, -0.7167321848351409, -0.8585831233457180, 0.4605095346027150, 3.0553680096530225, -0.5504261621248467, 22.7308877777777809, 15.6832530277777753, 49.1725929999999849, 306.2210440000000062, 4457.2833472500005882, 3363.5592304444444380, 1.4981817325192250, 15.9601895908075946, 0.6925250000000001, 7.2368883333333329};
int result_memory [NUMBER_OF_TEST_VECTORS*NUMBER_OF_OUTPUT_WORDS]; // same size as test_result_expected_memory
float results [NUMBER_OF_TEST_VECTORS][NUMBER_OF_OUTPUT_WORDS];
float mlp_labels [NUMBER_OF_TEST_VECTORS];
/*****************************************************************************
* Main function
******************************************************************************/
int main()
{
	int word_cnt, test_case_cnt = 0;
	int success;
	AXIS_wLAST read_output, write_input;
	hls::stream<AXIS_wLAST> S_AXIS;
	hls::stream<AXIS_wLAST> M_AXIS;

	/************** Run a software version of the hardware function to validate results ************/
	// instead of hard-coding the results in test_result_expected_memory

	for (test_case_cnt=0 ; test_case_cnt < NUMBER_OF_TEST_VECTORS ; test_case_cnt++){


		/******************** Input to Coprocessor : Transmit the Data Stream ***********************/

		printf(" Transmitting Data for test case %d ... \r\n", test_case_cnt);

		for (word_cnt=0 ; word_cnt < NUMBER_OF_INPUT_WORDS ; word_cnt++){

			write_input.data = test_input_memory[word_cnt+test_case_cnt*NUMBER_OF_INPUT_WORDS];
			write_input.last = 0;
			if(word_cnt==NUMBER_OF_INPUT_WORDS-1)
			{
				write_input.last = 1;
				// S_AXIS_TLAST is asserted for the last word.
				// Actually, doesn't matter since we are not making using of S_AXIS_TLAST.
			}
			S_AXIS.write(write_input); // insert one word into the stream
		}

		/* Transmission Complete */

		/********************* Call the hardware function (invoke the co-processor / ip) ***************/

		pca_mlp(S_AXIS, M_AXIS);


		/******************** Output from Coprocessor : Receive the Data Stream ***********************/

		printf(" Receiving data for test case %d ... \r\n", test_case_cnt);

		for (word_cnt=0 ; word_cnt < NUMBER_OF_OUTPUT_WORDS ; word_cnt++){

			read_output = M_AXIS.read(); // extract one word from the stream
			results[test_case_cnt][word_cnt] = read_output.data;
			printf("read_output: %f ...\n", read_output.data);
		}


		/* Reception Complete */
	}

	/************************** Checking correctness of results *****************************/

	success = 1;
	return 0;
}
