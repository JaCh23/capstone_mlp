#include <stdio.h>
#include <math.h>
#include "hls_stream.h"

/***************** AXIS with TLAST structure declaration *********************/

struct AXIS_wLAST{
	float data;
	bool last;
};


/***************** Coprocessor function declaration *********************/

void pca_mlp(hls::stream<AXIS_wLAST>& S_AXIS, hls::stream<AXIS_wLAST>& M_AXIS);


/***************** Macros *********************/
#define NUMBER_OF_INPUT_WORDS 125  // length of an input vector
#define NUMBER_OF_OUTPUT_WORDS 3  // length of an input vector
#define NUMBER_OF_TEST_VECTORS 3  // number of such test vectors (cases)

/************************** Variable Definitions *****************************/
//float test_input_memory [NUMBER_OF_TEST_VECTORS*NUMBER_OF_INPUT_WORDS] = {0.017314464190467227f,0.7821381516657591f,1.0f,0.7851502881374393f,0.8214685624410034f,0.777309756018898f,1.0f,0.7438152161080576f,0.8758875965614796f,0.0f,0.8176854178020512f,0.6521847636448815f,0.9915502727104807f,0.14720052571656392f,0.2867605526436922f,0.0f,0.0f,1.0f,0.0f,0.8176854178020512f,0.6521847636448815f,1.0f,0.0f,0.0f,0.7327470560085914f,0.7670054540398284f,0.7876194904561352f,0.0003777085979821404f,0.004562143134149377f,0.015229133588794186f,0.008489068444362813f,0.0f,0.009446904812559165f,0.9824486506311336f,0.5290985126034317f,0.38614894284325796f,0.9494529308687075f,0.0f,0.07397361806125458f,0.59476694098463f,0.7198436209281258f,0.26609692233259596f,0.9824486506311336f,0.5290985126034317f,0.38614894284325796f,0.5751971490522738f,0.5788592538242026f,0.6546772353702576f,0.6303608153040674f,0.6459125042423195f,0.7726308539512028f,0.009468520442085682f,0.011712710762579626f,0.017824833108515348f,0.005093946644663561f,0.019465654191712645f,0.015376622627928382f,0.83442008939342f,0.41204243574476007f,0.9999999999999999f,0.9916250943994421f,0.3075444576465419f,0.3291439600701033f,0.5410450286608446f,0.665238985485304f,0.1066198430894188f,0.83442008939342f,0.41204243574476007f,0.9999999999999999f,0.5787903934852892f,0.6250082118276563f,0.5450281584503717f,0.6522639521708093f,0.5505606440131224f,0.7592430676622473f,0.0f,0.0f,0.0f,0.0f,0.0047103240218238085f,0.0f,0.7469269261405295f,0.6540769780819387f,0.48900901327472834f,1.0f,0.2661700890020115f,0.2057585278383944f,0.583041640151744f,0.7457313758113601f,0.09223203419799791f,0.7469269261405295f,0.6540769780819387f,0.48900901327472834f,0.577763837422617f,0.5693925573430506f,0.5870560088071526f,0.0f,0.7878431164406379f,0.6870106909630802f,0.1287997530906948f,0.04890807975145384f,0.11378937234541442f,0.07753320210333703f,0.3867255070794684f,0.12348765216436264f,0.8663248888827084f,1.0f,0.28347135356732167f,0.2654557598637883f,0.9525514116146542f,0.4973485965097738f,0.36541609268994457f,0.8711934524925733f,0.11531701824106748f,0.8663248888827084f,1.0f,0.28347135356732167f,0.5362222766191846f,0.4115857831263833f,0.8471261015945116}; // 4 inputs * 2
float test_input_memory [NUMBER_OF_TEST_VECTORS*NUMBER_OF_INPUT_WORDS] = {0.0011678104305146, -0.0005737898194357, -0.0014821822247251, 0.0035258749187432, -0.0017426396219294, -0.0045226270306885, 0.0071093397775013, -0.0035416617725014, -0.0092603886694819, 0.0119483196176600, -0.0060054316104005, -0.0158733843145578, 0.0180455626151595, -0.0091479757273684, -0.0245470939564274, 0.0253543617857603, -0.0129394845197129, -0.0354411999909619, 0.0337606176509191, -0.0172833077563172, -0.0486600710261619, 0.0430747110044442, -0.0219969214902184, -0.0642329796032350, 0.0530357140693610, -0.0268036309135425, -0.0821040622466433, 0.0633276623956621, -0.0313371895451056, -0.1021386051882414, 0.0736067160370378, -0.0351625126702126, -0.1241394143650431, 0.0835346383215795, -0.0378115604387230, -0.1478702798255955, 0.0928139252120768, -0.0388304461945603, -0.1730804316489793, 0.1012185724091186, -0.0378303044528493, -0.1995249542717391, 0.1086158135906189, -0.0345342440333306, -0.2269766787323939, 0.1149762351369712, -0.0288125051935130, -0.2552287295464510, 0.1203720108176031, -0.0206995199080330, -0.2840895372459638, 0.1249650929059272, -0.0103912549794087, -0.3133735614056071, 0.1289868827683795, 0.0017759410228614, -0.3428916011161460, 0.1327136104152068, 0.0153606012618681, -0.3724440340354230, 0.1364401914430642, 0.0298589224083575, -0.4018184418922346, 0.1404548360678773, 0.0447487113756858, -0.4307915929582975, 0.1450163012031635, 0.0595289270560915, -0.4591345375025676, 0.1503342916885498, 0.0737509540387825, -0.4866188416561382, 0.1565542982534215, 0.0870403031946596, -0.5130228919045335, 0.1637472478979392, 0.0991083369752155, -0.5381375987237480, 0.1719043428962831, 0.1097552802674636, -0.5617715322411326, 0.1809372362496852, 0.1188667341379201, -0.5837562988194728, 0.1906843361944784, 0.1264050203532294, -0.6039525046510166, 0.2009229761766657, 0.1323977046617585, -0.6222560468168227, 0.2113855357769948, 0.1369247706687818, -0.6386039165093339, 0.2217782768604249, 0.1401050279710697, -0.6529774332245299, 0.2318009481825749, 0.1420832195840628, -0.6654021083845864, 0.2411647998667069, 0.1430179679810965, -0.6759428943071961, 0.2496073248780257, 0.1430704447460457, -0.6846954169899780, 0.2569033357714023, 0.1423935791011064, -0.6917713594691481, 0.2628710665576699, 0.1411232931339105, -0.6972850991202426, 0.2673743513822877, 0.1393697279729545, -0.7013384685070899, 0.2703232835646309, 0.1372104226475897, -0.7040074017044680, 0.2716732835646309, 0.1346854226475897, -0.7053324017044680, 0.2705054731341162, 0.1352592124670254, -0.7038502194797429, 2.0000000000000000, 0.0000000000000000, 0.0014064856638142, -0.0005754851738642, 0.0012340056550985, 0.0041871351845195, -0.0017068381965651, 0.0036988472712392, 0.0082691632500838, -0.0033469449458144, 0.0073776414179261, 0.0135256486308315, -0.0054077050371051, 0.0122210520054640, 0.0197601711016333, -0.0077449857800386, 0.0181246972745509, 0.0266942222904395, -0.0101470390948870, 0.0249077722525850, 0.0339618227113027, -0.0123313621338776, 0.0322983566088700, 0.0411147500863948, -0.0139536120085030, 0.0399301508346981, 0.0476395188021126, -0.0146293302251789, 0.0473531560400448, 0.0529855532655239, -0.0139664321796719, 0.0540589405962137, 0.0566012111511684, -0.0116045303724532, 0.0595170890067755, 0.0579742065605092, -0.0072544235585036, 0.0632197055862472, 0.0566726763316764, -0.0007309609703434, 0.0647276725448592, 0.0523814633017807, 0.0080258906771986, 0.0637128769015532, 0.0449308212073359, 0.0189442516300232, 0.0599918735026294, 0.0343145729484921, 0.0318270773872629, 0.0535473011722211, 0.0206967679944398, 0.0463695464816413, 0.0445359857106245, 0.0044057641161516, 0.0621823614429025, 0.0332838609015101, -0.0140835355410154, 0.0788170004826670, 0.0202687472228024, -0.0341778545252949, 0.0957903429923271, 0.0060928251420905, -0.0552025421113553, 0.1126076344630983, -0.0085532018195697, -0.0764446438047247, 0.1287845233803311, -0.0229323563934947, -0.0971986095367287, 0.1438694806089212, -0.0363080672224787, -0.1168114417107729, 0.1574668719693890, -0.0479928338986004, -0.1347236439610131, 0.1692595024889663, -0.0573956438586004, -0.1505018223707274, 0.1790282342061473, -0.0640644213076786, -0.1638603244862318, 0.1866647842800304, -0.0677190371604489, -0.1746689044367256, 0.1921743563879750, -0.0682701913951074, -0.1829461585040061, 0.1956664040684395, -0.0658209754860521, -0.1888388576212153, 0.1973343752110692, -0.0606496392377051, -0.1925904057421509, 0.1974271001795480, -0.0531750333352874, -0.1945033700932201, 0.1962169396889167, -0.0439099378229335, -0.1949009437675984, 0.1939709572913215, -0.0334082134662473, -0.1940929062279052, 0.1909283422365055, -0.0222141088954787, -0.1923502807004556, 0.1872865080456766, -0.0108204303684397, -0.1898908729578498, 0.1831963220659743, 0.0003594273322735, -0.1868755240426962, 0.1787644617740592, 0.0110045033148779, -0.1834125458286443, 0.1740602948615660, 0.0208864014554720, -0.1795664087608420, 0.1691241351541447, 0.0298615238297685, -0.1753664087608420, 0.1639741351541447, 0.0378615238297685, -0.1767728944246562, 0.1645496203280090, 0.0366275181746700, 0.0000000000000000, 1.0000000000000000, 0.0020555374651265, -0.0003244602563628, 0.0002052274574632, 0.0061577267785486, -0.0010169942669615, 0.0006050708105618, 0.0122779722859057, -0.0021474191328429, 0.0011736350825424, 0.0203485184359852, -0.0037802045182256, 0.0018620230358796, 0.0302389867991908, -0.0059343761206921, 0.0025888394438088, 0.0417358190756690, -0.0085419377430685, 0.0032359942388667, 0.0545241798494648, -0.0114141581386551, 0.0036480080602560, 0.0681868475808347, -0.0142227287317342, 0.0036391358192735, 0.0822167534953198, -0.0164995312961054, 0.0030099734528677, 0.0960434493232593, -0.0176579578454280, 0.0015701057305306, 0.1090742210562168, -0.0170354247587790, -0.0008369365979569, 0.1207434503796641, -0.0139520130268456, -0.0043108265752584, 0.1305641452599676, -0.0077781143114350, -0.0088789936223756, 0.1381762363231240, 0.0019965532184439, -0.0144919809289533, 0.1433839213240548, 0.0157019953493693, -0.0210304272511533, 0.1461787553479208, 0.0334426607803668, -0.0283222776455121, 0.1467448408663228, 0.0550735108192187, -0.0361645024523436, 0.1454469680605224, 0.0802015455528469, -0.0443454011475547, 0.1428026171701441, 0.1082120099870448, -0.0526613640949585, 0.1394415752449730, 0.1383166525162516, -0.0609262324789701, 0.1360557332432857, 0.1696182858834354, -0.0689727978708733, 0.1333427981706412, 0.2011835103359178, -0.0766489576943587, 0.1319483866455723, 0.2321152504221128, -0.0838125748736596, 0.1324104877155612, 0.2616166306783116, -0.0903282958046299, 0.1351115903188111, 0.2890405154431615, -0.0960701391498091, 0.1402435292680275, 0.3139202755509471, -0.1009289164821762, 0.1477902020819459, 0.3359809561765300, -0.1048239509835789, 0.1575300635507867, 0.3551324075807640, -0.1077152949036129, 0.1690604825992620, 0.3714476636402658, -0.1096133997281656, 0.1818382487794575, 0.3851315168650125, -0.1105830061066750, 0.1952313090798480, 0.3964840077366416, -0.1107403430008532, 0.2085749574579742, 0.4058635837582411, -0.1102440749394768, 0.2212229834301634, 0.4136533425865007, -0.1092816210512515, 0.2325891404878105, 0.4202322905814334, -0.1080536461797404, 0.2421738049454556, 0.4259531585690621, -0.1067581792578239, 0.2495770233791699, 0.4311262145981865, -0.1055770765701888, 0.2544993061762483, 0.4360076682431750, -0.1046662766199755, 0.2567301412391996, 0.4407932974854568, -0.1041480623566883, 0.2561390982586604, 0.4456153276069215, -0.1041053146848800, 0.2526640982586604, 0.4505403276069215, -0.1045803146848800, 0.2506085607935339, 0.4508647878632843, -0.1047855421423431, 1.0000000000000000, 0.0000000000000000};
//int test_result_expected_label [NUMBER_OF_TEST_VECTORS*NUMBER_OF_OUTPUT_WORDS] = {0x03,0x02, 0x01, 0x01}; // 1 outputs *2
int result_memory [NUMBER_OF_TEST_VECTORS*NUMBER_OF_OUTPUT_WORDS]; // same size as test_result_expected_memory
float results [NUMBER_OF_TEST_VECTORS][NUMBER_OF_OUTPUT_WORDS];
float mlp_labels [NUMBER_OF_TEST_VECTORS];
/*****************************************************************************
* Main function
******************************************************************************/
int main()
{
	int word_cnt, test_case_cnt = 0;
	int success;
	AXIS_wLAST read_output, write_input;
	hls::stream<AXIS_wLAST> S_AXIS;
	hls::stream<AXIS_wLAST> M_AXIS;

	/************** Run a software version of the hardware function to validate results ************/
	// instead of hard-coding the results in test_result_expected_memory

	for (test_case_cnt=0 ; test_case_cnt < NUMBER_OF_TEST_VECTORS ; test_case_cnt++){


		/******************** Input to Coprocessor : Transmit the Data Stream ***********************/

		printf(" Transmitting Data for test case %d ... \r\n", test_case_cnt);

		for (word_cnt=0 ; word_cnt < NUMBER_OF_INPUT_WORDS ; word_cnt++){

//			write_input.data = test_input_memory[word_cnt];
			write_input.data = test_input_memory[word_cnt+test_case_cnt*NUMBER_OF_INPUT_WORDS];
//			write_input.data = converter.i;
			write_input.last = 0;
			if(word_cnt==NUMBER_OF_INPUT_WORDS-1)
			{
				write_input.last = 1;
				// S_AXIS_TLAST is asserted for the last word.
				// Actually, doesn't matter since we are not making using of S_AXIS_TLAST.
			}
			S_AXIS.write(write_input); // insert one word into the stream
		}

		/* Transmission Complete */

		/********************* Call the hardware function (invoke the co-processor / ip) ***************/

		pca_mlp(S_AXIS, M_AXIS);


		/******************** Output from Coprocessor : Receive the Data Stream ***********************/

		printf(" Receiving data for test case %d ... \r\n", test_case_cnt);

		for (word_cnt=0 ; word_cnt < NUMBER_OF_OUTPUT_WORDS ; word_cnt++){

			read_output = M_AXIS.read(); // extract one word from the stream
//			converter.i = read_output.data;
			results[test_case_cnt][word_cnt] = read_output.data;
			printf("read_output: %f ...\n", read_output.data);
		}


		/* Reception Complete */
	}

	/************************** Checking correctness of results *****************************/

	success = 1;

	/* Compare the data send with the data received */


	/* Compare the data send with the data received */
//	printf(" Comparing data ...\r\n");
//	for(word_cnt=0; word_cnt < NUMBER_OF_TEST_VECTORS*NUMBER_OF_OUTPUT_WORDS; word_cnt++){
//		// success = success & (result_memory[word_cnt] == test_result_expected_memory[word_cnt]);
//		printf(" output data %d ; expected data %d ... \r\n", result_memory[word_cnt], test_result_expected_memory[word_cnt]);
//	}

	// if (success != 1){
	// 	printf("Test Failed\r\n");
	// 	return 1;
	// }

	// printf("Test Success\r\n");

	return 0;
}
